.. Quickstart file describing a quick plot with scikit-plot


First steps with Scikit-plot
============================

Eager to use Scikit-plot? Let's get started! This section of the documentation will teach you the basic philosophy behind Scikit-plot by running you through a quick example.

Installation
------------

Before anything else, make sure you've installed the latest version of Scikit-plot. Scikit-plot is on PyPi, so simply run::

    $ pip install scikit-plot

to install the latest version.

Alternatively, you can clone the `source repository <https://github.com/reiinakano/scikit-plot>`_ and run::

    $ python setup.py install

at the root folder.

Scikit-plot depends on `Scikit-learn <http://scikit-learn.org/>`_ and `Matplotlib <http://matplotlib.org/>`_ to do its magic, so make sure you have them installed as well.

Your First Plot
---------------

For our quick example, let's show how well a Random Forest can classify the digits dataset bundled with Scikit-learn. A popular way to evaluate a classifier's performance is by viewing its confusion matrix.

Before we begin plotting, we'll need to do the following imports for Scikit-plot::

    >>> import matplotlib.pyplot as plt
    >>> from scikitplot import classifier_factory

:class:`matplotlib.pyplot` is used by Matplotlib to make plotting work like MATLAB and deals with things like axes, figures, and subplots. But unless you're an advanced user, you don't need to worry about any of that while using Scikit-plot. All you need to remember is that we use the ``matplotlib.pyplot.show()`` function to show any plots generated by Scikit-plot.

We'll talk about the ``classifier_factory`` function in a bit.

For now, let's begin by generating our sample dataset::

    >>> from sklearn.datasets import load_digits
    >>> X, y = load_digits(return_X_y=True)

Here, ``X`` and ``y`` contain the features and labels of our classification dataset, respectively.

We'll proceed by creating an instance of a RandomForestClassifier object from Scikit-learn with some initial parameters::

    >>> from sklearn.ensemble import RandomForestClassifier
    >>> random_forest_clf = RandomForestClassifier(n_estimators=5, max_depth=5, random_state=1)

To plot and show our confusion matrix, we'll run ``random_forest_clf``'s instance method ``plot_confusion_matrix`` and call ``plt.show()``. We'll pass ``normalize=True`` to ``plot_confusion_matrix`` so the values displayed in our confusion matrix plot will be normalized.

    >>> random_forest_clf.plot_confusion_matrix(normalize=True)
    >>> plt.show()

